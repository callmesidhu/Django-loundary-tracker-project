{% extends "base.jinja" %}

{% block content %}
<!DOCTYPE html>
<html>
<head>
  <!-- Import qr-scanner as an ES module -->
  <script type="module">
    import QrScanner from "https://unpkg.com/qr-scanner@1.4.2/qr-scanner.min.js";
    QrScanner.WORKER_PATH = "https://unpkg.com/qr-scanner@1.4.2/qr-scanner-worker.min.js";
    // Expose QrScanner to the global window object for later use in inline scripts
    window.QrScanner = QrScanner;
  </script>
</head>
<body class="bg-gray-100">
  <div class="min-h-screen flex flex-col items-center justify-center py-10">
    <h1 class="text-3xl font-bold text-center mb-2">Unloading Point B</h1>
    <p class="text-center text-gray-500 mb-6">
      Scan via camera or upload a QR code image to register laundry items.
    </p>

    <!-- Card Container -->
    <div class="bg-white rounded-lg shadow p-8 w-full max-w-xl flex flex-col items-center">
      <!-- Video element for live camera scanning -->
      <video id="preview" class="w-80 h-80" style="border: 4px solid #3B82F6;"></video>

      <!-- File upload input for QR code image -->
      <div class="mt-4 w-full">
        <label class="block text-gray-700 mb-1">Upload QR Code Image:</label>
        <input type="file" id="qr-upload" accept="image/*" class="w-full border rounded p-2">
      </div>
      
      <!-- Display scanned UUID -->
      <p class="mt-4 text-gray-700 hidden" id="uuid-display">Scanned UUID: </p>
      
      <!-- Completed Button (hidden by default) -->
      <button id="complete-btn" class="mt-4 bg-green-500 text-white px-4 py-2 rounded hidden">
        Mark as Complete
      </button>
    </div>
  </div>

  <!-- Script to initialize the qr-scanner and handle scanning from both camera and upload -->
  <script type="module">
    const videoElem = document.getElementById('preview');
    let scannedData = null;

    // Function to process the scanned QR code result
    function processResult(result) {
      try {
        scannedData = JSON.parse(result);
      } catch (e) {
        scannedData = result;
      }
      
      let displayUuid = "";
      if (typeof scannedData === "object" && scannedData.UUID) {
        displayUuid = scannedData.UUID;
      } else {
        displayUuid = scannedData;
      }
      
      const uuidDisplayElem = document.getElementById("uuid-display");
      uuidDisplayElem.innerText = "Scanned UUID: " + displayUuid;
      uuidDisplayElem.classList.remove("hidden");
      document.getElementById("complete-btn").classList.remove("hidden");
    }

    // Initialize the live camera QR scanner
    const qrScanner = new window.QrScanner(videoElem, result => {
      console.log("QR code scanned from camera:", result);
      processResult(result);
      qrScanner.stop(); // Stop scanning once a code is detected
    });
    qrScanner.start();

    // Handle QR code image upload scanning
    document.getElementById("qr-upload").addEventListener("change", async (event) => {
      const file = event.target.files[0];
      if (!file) return;
      try {
        const result = await window.QrScanner.scanImage(file, { returnDetailedScanResult: true });
        console.log("QR code scanned from file:", result.data);
        processResult(result.data);
      } catch (error) {
        console.error("Error scanning QR code from image:", error);
        alert("Failed to scan QR code from the uploaded image. Please try another image.");
      }
    });

    // Attach click event to the "Mark as Complete" button to send a PUT request
    document.getElementById("complete-btn").addEventListener("click", function() {
      let uuidValue = "";
      if (typeof scannedData === "object" && scannedData.UUID) {
        uuidValue = scannedData.UUID;
      } else if (typeof scannedData === "string") {
        uuidValue = scannedData;
      }

      if (!uuidValue) {
        alert("No UUID available. Please scan or upload a QR code.");
        return;
      }

      // Send a PUT request to update the task
      fetch("/loading-start/update/", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "X-CSRFToken": getCookie("csrftoken")
        },
        body: JSON.stringify({ uuid: uuidValue })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === "success") {
          alert("Task updated successfully!");
          window.location.href = "/task-schedule/";
        } else {
          alert("Error updating task: " + data.message);
        }
      })
      .catch(error => {
        console.error("Error:", error);
        alert("An error occurred.");
      });
    });

    // Helper function to retrieve the CSRF token (for Django CSRF protection)
    function getCookie(name) {
      let cookieValue = null;
      if (document.cookie && document.cookie !== "") {
        const cookies = document.cookie.split(";");
        for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i].trim();
          if (cookie.substring(0, name.length + 1) === (name + "=")) {
            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
            break;
          }
        }
      }
      return cookieValue;
    }
  </script>
</body>
</html>
{% endblock %}

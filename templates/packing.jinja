{% extends "base.jinja" %}
{% block content %}
<div class="min-h-screen bg-gray-100 flex items-center justify-center py-10">
  <!-- Card Container -->
  <div class="w-full max-w-md bg-white rounded-lg shadow p-8">
    <!-- Heading -->
    <h1 class="text-2xl font-bold text-center mb-2">Packing Station</h1>
    <!-- Subheading -->
    <p class="text-center text-gray-500 mb-6">Register packed laundry items</p>
    
    <!-- Form -->
    <form id="packingForm">
      <!-- Number of Clothes -->
      <div class="mb-4">
        <label for="quantity" class="block font-semibold mb-1">Number of Clothes</label>
        <input
          type="number"
          id="quantity"
          name="quantity"
          placeholder="Enter quantity"
          class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:border-blue-500"
          required
        />
      </div>
      
      <!-- Type of Clothes -->
      <div class="mb-4">
        <label for="clothes-type" class="block font-semibold mb-1">Type of Clothes</label>
        <select
          id="clothes-type"
          name="clothes_type"
          class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:border-blue-500"
          required
        >
          <option value="">Select clothes type</option>
          <option value="bed_sheets">Bed Sheets</option>
          <option value="pillowcases">Pillowcases</option>
          <option value="blankets">Blankets</option>
          <option value="towels">Towels</option>
          <option value="patient_gowns">Patient Gowns</option>
          <option value="staff_uniforms">Staff Uniforms</option>
          <option value="surgical_drapes">Surgical Drapes</option>
          <option value="privacy_curtains">Privacy Curtains</option>
          <option value="other">Other</option>
        </select>
      </div>
      
      <!-- Submit Button -->
      <button
        type="submit"
        class="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition-colors"
      >
        Generate QR Code
      </button>
    </form>
  </div>
</div>

<!-- Modal Popup for the QR Code -->
<div id="modal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-80 hidden">
  <div class="bg-white rounded-lg shadow-lg p-8 relative max-w-xs w-full">
    <button id="closeModal" class="absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-2xl">&times;</button>
    <h1 class="text-green-500 text-lg font-bold text-center mb-5">QR Code generated Successfully!</h1>
    <div id="qrcodeModal" class="flex justify-center mb-2"></div>
    <!-- Display the UUID below the QR code -->
    <p id="uuidDisplay" class="text-center font-semibold mb-4"></p>
    <button id="downloadQR" class="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700 transition-colors mb-2">Download QR Code</button>
    <button id="updateTask" class="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition-colors">Update Task</button>
  </div>
</div>

<!-- Include QRCode.js library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
<script>
// Helper function to get CSRF token from cookies
function getCookie(name) {
  let cookieValue = null;
  if (document.cookie && document.cookie !== '') {
    let cookies = document.cookie.split(';');
    for (let i = 0; i < cookies.length; i++) {
      let cookie = cookies[i].trim();
      if (cookie.substring(0, name.length + 1) === (name + '=')) {
        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        break;
      }
    }
  }
  return cookieValue;
}

// Global variable to store the UUID value
var uuidValue = "";

// Function to get UUID from query parameter if available
function getUUIDFromURL() {
  const params = new URLSearchParams(window.location.search);
  return params.get("uuid");
}

// Check if a UUID is present in the URL
var urlUUID = getUUIDFromURL();
if (urlUUID) {
  // Remove any trailing slash from the UUID
  uuidValue = urlUUID.replace(/\/+$/, "");
}

document.getElementById('packingForm').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent the default form submission
    
    // Gather form values
    var quantity = document.getElementById('quantity').value;
    var clothesType = document.getElementById('clothes-type').value;
    
    // If no UUID was provided in the URL, generate a new 5-digit UUID
    if (!uuidValue) {
      uuidValue = Math.floor(10000 + Math.random() * 90000).toString();
    }

    // Create JSON object with form data and UUID
    var data = {
        "UUID": uuidValue,
        "Number of Clothes": quantity,
        "Type of Clothes": clothesType
    };

    // Convert the JSON object to a string for the QR code
    var jsonString = JSON.stringify(data);

    // Clear any previous QR code in the modal
    document.getElementById('qrcodeModal').innerHTML = '';

    // Generate the QR Code using the QRCode.js library
    new QRCode(document.getElementById('qrcodeModal'), {
        text: jsonString,
        width: 200,
        height: 200
    });

    // Display the UUID below the QR code without any trailing slash
    document.getElementById('uuidDisplay').textContent = "UUID: " + uuidValue;

    // Show the modal pop-up
    document.getElementById('modal').classList.remove('hidden');
});

// Close the modal when the close button is clicked
document.getElementById('closeModal').addEventListener('click', function() {
    document.getElementById('modal').classList.add('hidden');
});

// Download the QR code image when the download button is clicked
document.getElementById('downloadQR').addEventListener('click', function() {
    var qrContainer = document.getElementById('qrcodeModal');
    var qrImg = qrContainer.querySelector('img');
    if (qrImg) {
        var link = document.createElement('a');
        link.href = qrImg.src;
        link.download = 'qr-code.png';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } else {
        alert("QR Code image not found!");
    }
});

// Update task using the generated UUID when the update button is clicked
document.getElementById('updateTask').addEventListener('click', function() {
    fetch('/packing/update/', { 
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          "X-CSRFToken": getCookie("csrftoken"),
        },
        body: JSON.stringify({ uuid: uuidValue })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === "success") {
          alert("Task updated successfully!");
          window.location.href = "/task-schedule/";
        } else {
          alert("Error updating task: " + data.message);
        }
      })
      .catch(error => {
        console.error("Error:", error);
        alert("An error occurred.");
      });
});
</script>
{% endblock %}
